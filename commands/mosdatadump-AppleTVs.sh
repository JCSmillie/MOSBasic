#!/bin/zsh

################################################################
#
#	iosdump.sh  
#		Script pulls all iPads from Mosyle and sorts them out 
#		into other files.  These files are utilized after the
#		fact by other scripts.
#
#		JCS - 9/28/2021  -v2
#
################################################################
source "$BAGCLI_WORKDIR/config"
source "$BAGCLI_WORKDIR/common"
IFS=$'\n'

DATECODEFORFILE=`date '+%Y-%m-%d_%H:%M'`


CMDRAN="iOSdump"

if [ "$MB_DEBUG" = "Y" ]; then
	echo "Variable 1-> $1"
	echo "Variable 2-> $2"
	echo "Variable 3-> $3"
	echo "Variable 4-> $4"
fi

#################################
#            Functions          #
#################################
#Format for an iPad Data Dump of JSON
Generate_JSON_IOSDUMPPostData() {
cat <<EOF
	{"accessToken": "$MOSYLE_API_key",
	"options": {
		"os": "tvos",
		"page": "$THEPAGE",
		"specific_columns": "deviceudid,serial_number,device_name,tags,asset_tag,userid,enrollment_type,username,date_app_info"
	}
}
EOF
}


################################
#            DO WORK           #
################################

#Test to see if we have a config variable and if so use it.  Without
#it assum we are using the default output method.
if [ -z "$TEMPOUTPUTFILE_MERGEDTVOS" ]; then
	TEMPOUTPUTFILE_MERGEDTVOS="/tmp/Mosyle_active_tvOS_Tagz_MergedATVs.txt"
	cli_log "No path specified.  Sending data to $TEMPOUTPUTFILE_MERGEDTVOS"
else
	cli_log "TEMPOUTPUTFILE_MERGEDTVOS has been set to $TEMPOUTPUTFILE_MERGEDTVOS"
fi


#Remove any prior works generated by this script.  If its here then keep a copy.
if [ -s "$TEMPOUTPUTFILE_MERGEDTVOS" ]; then
	cli_log "Creating copy of current dump---> /tmp/Current-$DATECODEFORFILE.MosyleTVosDump.txt"
	cp "$TEMPOUTPUTFILE_MERGEDTVOS" /tmp/Current-$DATECODEFORFILE.MosyleTVosDump.txt
else
	cli_log "No Existing Dump.  No BKUP created."
fi


#Initialize the base count variable. This will be
#used to figure out what page we are on and where
#we end up.
THECOUNT=0
DataRequestFailedCount=0

#Before starting to grab data lets grab the Bearer Token
GetBearerToken

# Connect to Mosyle API multiple times (for each page) so we
# get all of the available data.
while true; do
	let "THECOUNT=$THECOUNT+1"
	THEPAGE="$THECOUNT"
	
	if [ "$DataRequestFailedCount" -gt 5 ]; then
		cli_log "TOO MANY DATA REQUEST FAILURES.  ABORT!!!!!"
		exit 1
	fi
	

	cli_log "iOS CLIENTS-> Asking MDM for Page $THEPAGE data...."

	#This is a new CURL call with JSON data - JCS 11/8/23
	curl --location 'https://managerapi.mosyle.com/v2/listdevices' \
		--header 'content-type: application/json' \
		--header "Authorization: Bearer $AuthToken" \
		--data "$(Generate_JSON_IOSDUMPPostData)" -o /tmp/MOSBasicRAW-tvOS-Page$THEPAGE.txt 2> /dev/null



	#Detect we just loaded a page with no content and stop.
	LASTPAGE=$(cat "/tmp/MOSBasicRAW-tvOS-Page$THEPAGE.txt" | grep DEVICES_NOTFOUND)
	if [ -n "$LASTPAGE" ]; then
		let "THECOUNT=$THECOUNT-1"
		cli_log "iOS CLIENTS-> Yo we are at the end of the list (Last good page was $THECOUNT)"
		break
	fi

	#Make sure file has content
	if [ ! -s "/tmp/MOSBasicRAW-tvOS-Page$THEPAGE.txt" ]; then
	#if [[ ! -z $(cat "/tmp/MOSBasicRAW-tvOS-Page$THEPAGE.txt") ]] ; then	
		cli_log "Page $THEPAGE reqested from Mosyle but had no data.  Skipping."
		let "DataRequestFailedCount=$DataRequestFailedCount+1"
		continue
	fi

	#TokenFailures
	LASTPAGE=$(cat "/tmp/MOSBasicRAW-tvOS-Page$THEPAGE.txt" | grep 'accessToken Required')
	if [ -n "$LASTPAGE" ]; then
		let "THECOUNT=$THECOUNT-1"
		cli_log "iOS CLIENTS-> AccessToken error..."
		break
	fi
	
	#Are we on more pages then our max (IE something wrong)
	if [ "$THECOUNT" -gt "$MAXPAGECOUNT" ]; then 
		cli_log "MAC CLIENTS-> We have hit $THECOUNT pages...  Greater then our max.  Something is wrong."
		break
	fi

	LASTPAGE=$(cat "/tmp/MOSBasicRAW-tvOS-Page$THEPAGE.txt" | grep 'Unauthorized')
	if [ -n "$LASTPAGE" ]; then
		cli_log "iOS CLIENTS-> Authorization error pulling page #$THEPAGE"

	else
		cli_log "iOS ClIENTS-> Processing page #$THEPAGE"
		#Preprocess the file.  We need to remove {"status":"OK","response": so can do operations with our python json to csv converter.  Yes
		#I know this is still janky but hay I'm getting there.
		cat /tmp/MOSBasicRAW-tvOS-Page$THEPAGE.txt  | cut -d ':' -f 3- | sed 's/.$//' > /tmp/MOSBasicRAW-tvOS-TEMPSPOT.txt
		mv -f /tmp/MOSBasicRAW-tvOS-TEMPSPOT.txt /tmp/MOSBasicRAW-tvOS-Page$THEPAGE.txt

		#Call our python json to csv routine.  Output will be tab delimited so we can maintain our "tags" together.
		#$PYTHON2USE $BAGCLI_WORKDIR/modules/json2csv.py devices /tmp/MOSBasicRAW-tvOS-Page$THEPAGE.txt "$TEMPOUTPUTFILE_MERGEDIOS"
		$PYTHON2USE $BAGCLI_WORKDIR/modules/json2csv.py devices /tmp/MOSBasicRAW-tvOS-Page$THEPAGE.txt /tmp/DUMPINPROGRESS-$DATECODEFORFILE.MosyletvOSDump.txt	
	fi
done

##########
####NOTE TO SELF.  THIS BLOCK NEEDS CHANGED TO EVENTUALY DO SOME
####sort of test before swapping out the data file.
#Delete Existing file
rm -Rf "$TEMPOUTPUTFILE_MERGEDTVOS"
#Move newly generated file into place.
cp /tmp/DUMPINPROGRESS-$DATECODEFORFILE.MosyletvOSDump.txt "$TEMPOUTPUTFILE_MERGEDTVOS"




#At this point I would run a follow up script to used the data we parsed above. All data above ends up 
#in an csv style sheet so its easy to use the "cut" command to parse that data.
if [ ! "$MB_DEBUG" = "Y" ]; then
	#Unless we are debugging then we need to cleanup after ourselves
	rm -f /tmp/MOSBasicRAW-tvOS-*.txt
else
	cli_log "iOS CLIENTS-> DEBUG IS ENABLED.  NOT CLEANING UP REMAINING FILES!!!!"
fi