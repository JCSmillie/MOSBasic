#!/bin/zsh

################################################################
#
#	macdump.sh  
#		Script pulls all Macs from Mosyle and sorts them out 
#		into other files.  These files are utilized after the
#		fact by other scripts.
#
#		JCS - 2/12/22  -v2
#
################################################################
source "$BAGCLI_WORKDIR/config"
source "$BAGCLI_WORKDIR/common"
IFS=$'\n'


CMDRAN="iOSdump"

if [ "$MB_DEBUG" = "Y" ]; then
	echo "Variable 1-> $1"
	echo "Variable 2-> $2"
	echo "Variable 3-> $3"
	echo "Variable 4-> $4"
fi

echo "$TEMPOUTPUTFILE_MACStu"
echo "$TEMPOUTPUTFILE_MACLimbo"
echo "$TEMPOUTPUTFILE_MACShared"
echo "$TEMPOUTPUTFILE_MERGEDMAC"
################################
#            DO WORK           #
################################
#Remove any prior works generated by this script
rm -Rf "$TEMPOUTPUTFILE_MACStu"
rm -Rf "$TEMPOUTPUTFILE_MACTeachers"
rm -Rf "$TEMPOUTPUTFILE_MACLimbo"
rm -Rf "$TEMPOUTPUTFILE_MACShared"
rm -Rf "$TEMPOUTPUTFILE_MERGEDMAC"
rm -Rf /tmp/TEMP.json

#Initialize the base count variable. This will be
#used to figure out what page we are on and where
#we end up.
THECOUNT=0

# Connect to Mosyle API multiple times (for each page) so we
# get all of the available data.
while true; do
	let "THECOUNT=$THECOUNT+1"
	THEPAGE="$THECOUNT"
	content="{\"accessToken\":\"$APIKey\",\"options\":{\"os\":\"mac\",\"specific_columns\":\"deviceudid,serial_number,device_name,tags,asset_tag,userid,date_app_info\",\"page\":$THEPAGE}}"
	output=$(curl -s -k -X POST -d 'content='$content 'https://managerapi.mosyle.com/v2/listdevices') >> $LOG




	#Detect we just loaded a page with no content and stop.
	LASTPAGE=$(echo $output | grep DEVICES_NOTFOUND)
	if [ -n "$LASTPAGE" ]; then
		let "THECOUNT=$THECOUNT-1"
		cli_log "Yo we are at the end of the list (Last good page was $THECOUNT)"
		break
	fi

	echo " "
	cli_log "Page $THEPAGE data."
	echo "-----------------------"

	#Now take the JSON data we received and parse it into tab
	#delimited output.
	#echo "$output" >> /tmp/MOSBasicRAW.txt

	#Right from the git go exclude any results which are for General (Limbo) iPads, Shared iPads, Staff iPads, or Teacher iPads.
	#This creates the list of student iPads
	echo "$output"| awk 'BEGIN{FS=",";RS="},{"}{print $0}' | grep -v GENERAL | grep -v SHARED | grep -v Teacher | grep -v Staff | grep -v Leader | grep serial_number |  perl -pe 's/.*"deviceudid":"?(.*?)"?,"serial_number":"(.*?)","device_name":"?(.*?)"?,"tags":"?(.*?)"?,"asset_tag":"?(.*?)"?,"date_app_info":"?(.*?)","enrollment_type":"?(.*?)","userid":"?(.*?)","username":"?(.*?)","usertype":"?(.*?)",*.*/\1\t\2\t\3\t\4\t\5\t\6\t\7\t\8\t\9/' >> "$TEMPOUTPUTFILE_MACStu"

	#Now a file with just Teachers/Staff in it.
	echo "$output"| awk 'BEGIN{FS=",";RS="},{"}{print $0}' | grep -v GENERAL | grep -v SHARED |grep -v Student | grep serial_number |  perl -pe 's/.*"deviceudid":"?(.*?)"?,"serial_number":"(.*?)","device_name":"?(.*?)"?,"tags":"?(.*?)"?,"asset_tag":"?(.*?)"?,"date_app_info":"?(.*?)","enrollment_type":"?(.*?)","userid":"?(.*?)","username":"?(.*?)","usertype":"?(.*?)",*.*/\1\t\2\t\3\t\4\t\5\t\6\t\7\t\8\t\9/' >> "$TEMPOUTPUTFILE_MACTeachers"

	#A file with all the Shared Mode iPAds in it
	echo "$output"| awk 'BEGIN{FS=",";RS="},{"}{print $0}' | grep SHARED | grep serial_number |  perl -pe 's/.*"deviceudid":"?(.*?)"?,"serial_number":"(.*?)","device_name":"?(.*?)"?,"tags":"?(.*?)"?,"asset_tag":"?(.*?)"?,"date_app_info":"?(.*?)","enrollment_type":"?(.*?)",*.*/\1\t\2\t\3\t\4\t\5\t\6/' >> "$TEMPOUTPUTFILE_MACShared"
	#Finally a file with all the Limbo devices
	echo "$output"| awk 'BEGIN{FS=",";RS="},{"}{print $0}' | grep GENERAL | grep serial_number |  perl -pe 's/.*"deviceudid":"?(.*?)"?,"serial_number":"(.*?)","device_name":"?(.*?)"?,"tags":"?(.*?)"?,"asset_tag":"?(.*?)"?,"date_app_info":"?(.*?)","enrollment_type":"?(.*?)",*.*/\1\t\2\t\3\t\4\t\5\t\6/' >> "$TEMPOUTPUTFILE_MACLimbo"


done

#Build file of all this data now that we've sorted it out and parsed it.
#we still need the single/individual files for legacy support of other
#scripts but going forward the merge'd file will be the way to go.
cat "$TEMPOUTPUTFILE_MACStu" > "$TEMPOUTPUTFILE_MERGEDMAC"
cat "$TEMPOUTPUTFILE_MACTeachers" >> "$TEMPOUTPUTFILE_MERGEDMAC"
cat "$TEMPOUTPUTFILE_MACLimbo" >> "$TEMPOUTPUTFILE_MERGEDMAC"
cat "$TEMPOUTPUTFILE_MACShared" >> "$TEMPOUTPUTFILE_MERGEDMAC"





#At this point I would run a follow up script to used the data we parsed above. All data above ends up 
#in an csv style sheet so its easy to use the "cut" command to parse that data.
