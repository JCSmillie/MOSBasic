#!/bin/zsh
#
#MOSBasic 
#
#   __  __  ____   _____ ____            _      
#  |  \/  |/ __ \ / ____|  _ \          (_)     
#  | \  / | |  | | (___ | |_) | __ _ ___ _  ___ 
#  | |\/| | |  | |\___ \|  _ < / _` / __| |/ __|
#  | |  | | |__| |____) | |_) | (_| \__ \ | (__ 
#  |_|  |_|\____/|_____/|____/ \__,_|___/_|\___|
#
# This file is dedicated to functions which could be called
# across the board through out all commands.

#
################################
#          FUNCTIONS           #
################################
cli_log() {
	LINE=$1
	TODAY=`date '+%a %x %X'`
	#Print on stdout
	echo "$TODAY =====>$LINE"
	#Log to file
	echo "$CMDRAN ++> $TODAY =====> $LINE" >> $LOG
}

cli_graffitti() {
	echo "${Cyan}"
	echo '   __  __  ____   _____ ____            _       '
	echo '  |  \/  |/ __ \ / ____|  _ \          (_)      '
	echo '  | \  / | |  | | (___ | |_) | __ _ ___ _  ___  '
	echo '  | |\/| | |  | |\___ \|  _ < / _` / __| |/ __| '
	echo '  | |  | | |__| |____) | |_) | (_| \__ \ | (__  '
	echo '  |_|  |_|\____/|_____/|____/ \__,_|___/_|\___| '
	echo "${reset}"
	

}

ParseIt_ios() {
	#If "line" varible isnt filled then assume we gave
	#data when the command was ran from the $1 variable.
	if [ -z "$line" ]; then
		line="$1"
		
	elif [ -z "$line" ] && [ -z "$1" ]; then
		log_line "No data given.  Can't parse!"
		exit
	fi
	
	UDID=$(echo "$line" | cut -f 1 -d$'\t')
	DeviceSerialNumber=$(echo "$line" | cut -f 2 -d$'\t')
	CURRENTNAME=$(echo "$line" | cut -f 3 -d$'\t')
	TAGS=$(echo "$line" | cut -f 4 -d$'\t')
	ASSETTAG=$(echo "$line" | cut -f 5 -d$'\t')
	LASTCHECKIN=$(echo "$line" | cut -f 6 -d$'\t')
	ENROLLMENT_TYPE=$(echo "$line" | cut -f 7 -d$'\t')
	USERID=$(echo "$line" | cut -f 8 -d$'\t')
	NAME=$(echo "$line" | cut -f 9 -d$'\t')
	
	if [ "$LASTCHECKIN" = "null" ]; then
		LASTCHECKIN="NO-DATA"
	else
		#Take Epoch time and convert to hours
		LASTCHECKIN=$($PYTHON2USE -c "import datetime; print(datetime.datetime.fromtimestamp(int("$LASTCHECKIN")).strftime('%Y-%m-%d %I:%M:%S %p'))")
	fi
}

ParseIt_MacOS() {
	#If "line" varible isnt filled then assume we gave
	#data when the command was ran from the $1 variable.
	if [ -z "$line" ]; then
		line="$1"
		
	elif [ -z "$line" ] && [ -z "$1" ]; then
		log_line "No data given.  Can't parse!"
		exit
	fi
	UDID=$(echo "$line" | cut -f 1 -d$'\t')
	DeviceSerialNumber=$(echo "$line" | cut -f 2 -d$'\t')
	CURRENTNAME=$(echo "$line" | cut -f 3 -d$'\t')
	TAGS=$(echo "$line" | cut -f 4 -d$'\t')
	ASSETTAG=$(echo "$line" | cut -f 5 -d$'\t')
	LASTCHECKIN=$(echo "$line" | cut -f 6 -d$'\t')
	ENROLLMENT_TYPE=$(echo "$line" | cut -f 7 -d$'\t')
	USERID=$(echo "$line" | cut -f 8 -d$'\t')
	NAME=$(echo "$line" | cut -f 9 -d$'\t')
	
	if [ "$LASTCHECKIN" = "null" ]; then
		LASTCHECKIN="NO-DATA"
	else
		#Take Epoch time and convert to hours
		LASTCHECKIN=$($PYTHON2USE -c "import datetime; print(datetime.datetime.fromtimestamp(int("$LASTCHECKIN")).strftime('%Y-%m-%d %I:%M:%S %p'))")
	fi
}

ParseIt_group() {
	GRPID=$(echo "$line" | cut -f 1 -d$'\t')
	GRPNAME=$(echo "$line" | cut -f 2 -d$'\t')
	GRPNUMOFMEMBS=$(echo "$line" | cut -f 3 -d$'\t')
}

SerialFromTag() {
	#Search through our known serials
	SERIALIS=$(cat "$TEMPOUTPUTFILE_MERGEDIOS" | cut -d$'\t' -f 2-5,7-9 | grep "$TAG_GIVEN" | cut -d$'\t' -f 1 )
	SERIALIS=$(cat "$TEMPOUTPUTFILE_MERGEDIOS" | grep "$SERIALIS")
	
	HowManyReturns=$(echo "$SERIALIS" | wc -l)
	HowManyReturns="${HowManyReturns//[[:space:]]/}"
	
	#Check to see how many serial numbers came back.  More than 1 we have a problem.
	if [ "$HowManyReturns" -gt 1 ]; then
		cli_log "Attempted to find serial for #$TAG_GIVEN and got too many serials back!"
		RETURNSERIAL="TOOMANYSERIALS"
	
	#echo "DEBUG--> $SERIALIS"
	elif [ ! -z "$SERIALIS" ]; then
		
		line="$SERIALIS"
		ParseIt_ios
		
		RETURNSERIAL="$DeviceSerialNumber"
		#echo "DEBUG--> $RETURNSERIAL"

	else
		cli_log "Attempted to find serial for tag #$TAG_GIVEN and failed."
		RETURNSERIAL="EPICFAIL"
	fi

}

#Format for an iPad Data Dump of JSON
Generate_JSON_SharediPadPostData() {
cat <<EOF
	{"accessToken": "$MOSYLE_API_key",
	"options": {
		"os": "ios",
		"serial_numbers": "$DeviceSerialNumber",
		"page": "$THEPAGE",
		"specific_columns": "deviceudid,serial_number,enrollment_type"
	}
}
EOF
}

#Ask Mosyle if a specific serial # is a Shared Mode iPad
IsThisiPadSharedMode() {
	GetBearerToken
	# #Our query.  We are asking for a specific serial # and only asking back for UDID, Serial and enrollment type
	# content="{\"accessToken\":\"$APIKey\",\"options\":{\"os\":\"ios\",\"serial_numbers\":[\"$DeviceSerialNumber\"],\"specific_columns\":\"deviceudid,serial_number,enrollment_type\"}}"
	#
	# #Do the Query
	# output=$(curl -s -k -X POST -d $content 'https://managerapi.mosyle.com/v2/listdevices')

	#This is a new CURL call with JSON data - JCS 11/8/23
	output=$(curl --location 'https://managerapi.mosyle.com/v2/listdevices' \
		--header 'content-type: application/json' \
		--header "Authorization: Bearer $AuthToken" \
		--data "$(Generate_JSON_IOSDUMPPostData)") >> $LOG

	if echo "$output" | grep SHARED; then
		echo "This is a Shared iPad."
		ISSHARED="TRUE"
	else
		ISSHARED="FALSE"
	fi
}

####################################################
# Check for our data file of Apple updates.  If we don't
# have it or its older than 6hrs pull it again.
####################################################
GetAppleUpdateData(){
	if [ ! -s "/tmp/data.json" ]; then
		log_line "Data file is missing.  Must create."

		#This command will dump all of the Apple page which details which version of
		#software runs on devices.  File is ordered newest OS on top.
		curl  -S -s "https://gdmf.apple.com/v2/pmv" | /usr/local/munki/munki-python -m json.tool > /tmp/data.json
		
	elif [ `find "/tmp/data.json" -mmin +360 | egrep '.*'` ]; then
		log_line "Data file is out of date.  Must grab new data."

		#This command will dump all of the Apple page which details which version of
		#software runs on devices.  File is ordered newest OS on top.
		curl  -S -s -o 'https://gdmf.apple.com/v2/pmv' | /usr/local/munki/munki-python -m json.tool > /tmp/data.json
		
	else
		log_line "Data file is found and appears new enough.  Continuing."
	fi
}

CheckBuildVersion() {
	#This chunk of code is all new.  Back in April 22' an AppleSE inquired about how do I know a device needs
	#updated or note.  Originally I had a manual table listed of build numbers.  This table had to be updated
	#every time a new version comes out though.  Instead now we ask Apple for a list of all device types and
	#what version of iPadOS they should have.  Ask the iPad what firmware it has, compare, and act.  
	
	#Make sure we have a data file from Apple about currently available iOS/iPadOS versions.
	#NOTE-> This function comes from MOSBasic/Common
	GetAppleUpdateData
	
	#User CFGUTIL to figure out the Model (by deviceType ID) and current
	#version of iPadOS running.
	deviceType=$(bash -c "/usr/local/bin/cfgutil --ecid "$ECID" get deviceType" 2</dev/null)
	firmwareVersion=$(bash -c "/usr/local/bin/cfgutil --ecid "$ECID" get firmwareVersion" 2</dev/null)

	if [ "$DEBUG" = "Y" ]; then
		echo "We are looking at a device with type ($deviceType) running firmware version ($firmwareVersion)"
	fi

	#Cat the fie of Apple update data.  Use AWK to print out everything until we hit the device we
	#have.  Now AWK again to find out waht the latest version attributed is.  Use cut to get us down to just
	#a variable.
	AwkWithDeviceVariable=$(echo "{print} /$deviceType/ {exit}")
	GetOSVersion=$(cat /tmp/data.json | awk "$AwkWithDeviceVariable" | grep ProductVersion | tail -1 | cut -d ':' -f 2 | cut -d '"' -f 2)

	#Test data we got back.
	if [ -z "$GetOSVersion" ]; then
		echo "Lookup of supported iOS/iPadOS didn't work.  Cant check update status."
	elif [ "$DEBUG" = "Y" ]; then
		echo "Apple updates site says $deviceType should be running $GetOSVersion"
	fi

	autoload is-at-least

	#If versions match we can mobe on
	if [ "$firmwareVersion" = "$GetOSVersion" ]; then
		echo "iPad is running latest available ($firmwareVersion.)  No update necessary."
		WIPEIT="FALSE"

	elif is-at-least "$firmwareVersion" "$GetOSVersion"; then
		echo "This iPad needs updated. OS installed ($firmwareVersion) is older then what is should be ($GetOSVersion)"
		WIPEIT="TRUE"
		
	else
		echo "Couldn't get a lock on what we should do ($firmwareVersion/$GetOSVersion) so no update will be called for."
		WIPEIT="FALSE"
	fi
}

#Format for an iPad Data Dump of JSON
Generate_JSON_IOSDUMPPostData() {
cat <<EOF
	{"accessToken": "$MOSYLE_API_key",
	"options": {
		"os": "ios",
		"serial_numbers": "$DeviceSerialNumber",
		"page": "$THEPAGE",
		"specific_columns": "date_last_beat,lostmode_status,last_ip_beat,last_lan_ip,userid"
	}
}
EOF
}

GetCurrentInfo-ios(){
	GetBearerToken
	# content="{\"accessToken\":\"$APIKey\",\"options\":{\"os\":\"ios\",\"serial_numbers\":[\"$DeviceSerialNumber\"],\"specific_columns\":\"date_last_beat,lostmode_status,last_ip_beat,last_lan_ip,userid\"}}"
	# output=$(curl -s -k -X POST -d $content 'https://managerapi.mosyle.com/v2/listdevices') >> $LOG
	
	
	#This is a new CURL call with JSON data - JCS 11/8/23
	output=$(curl --location 'https://managerapi.mosyle.com/v2/listdevices' \
		--header 'content-type: application/json' \
		--header "Authorization: Bearer $AuthToken" \
		--data "$(Generate_JSON_IOSDUMPPostData)") 
	
	if echo "$output" | grep "DEVICES_NOTFOUND"; then
		log_line "No updated info available for $DeviceSerialNumber"
		
	else
		# if [ "$MB_DEBUG" = "Y" ]; then
			echo "$output" > "/tmp/$DeviceSerialNumber.GetCurrentInfo-ios.txt"
		# fi
		
		#What parse are we using
		if echo "$output" | grep -q "userid"; then
			#iPad is assigned
			MicroParse=$(echo "$output"| awk 'BEGIN{FS=",";RS="},{"}{print $0}' | perl -pe 's/.*"date_last_beat":"?(.*?)"?,"lostmode_status":"(.*?)","last_ip_beat":"?(.*?)"?,"last_lan_ip":?(.*?),"userid":"?(.*?)","usertype":"?(.*?)",*.*/\1\t\2\t\3\t\4\t\5\t\6\t\7/')			
		else
			#iPad not assigned.  Use this one.
			MicroParse=$(echo "$output"| awk 'BEGIN{FS=",";RS="},{"}{print $0}' | perl -pe 's/.*"date_last_beat":"?(.*?)"?,"lostmode_status":"(.*?)","last_ip_beat":"?(.*?)"?,"last_lan_ip":"?(.*?)",*.*/\1\t\2\t\3\t\4\t\5/')
		fi

		LASTCHECKIN=$(echo "$MicroParse" |  cut -f 1 -d$'\t' )
		LOSTMODESTATUS=$(echo "$MicroParse" |  cut -f 2 -d$'\t' )
		LAST_IP_BEAT=$(echo "$MicroParse" |  cut -f 3 -d$'\t' )
		LAST_LAN_IP=$(echo "$MicroParse" |  cut -f 4 -d$'\t' )
		USERID=$(echo "$MicroParse" |  cut -f 5 -d$'\t' )
		
		#If device is unassigned then set the USERID to be UNASSIGNED
		if [ ! -n "$USERID" ]; then
			USERID="UNASSIGNED"
		fi
		
		if [ "$LASTCHECKIN" = "null" ]; then
			LASTCHECKIN="NO-DATA"
		else
			#Take Epoch time and convert to hours
			LASTCHECKIN=$($PYTHON2USE -c "import datetime; print(datetime.datetime.fromtimestamp(int("$LASTCHECKIN")).strftime('%Y-%m-%d %I:%M:%S %p'))")
		fi
	fi

}

Generate_JSON_MacOSDUMPPostData() {
cat <<EOF
	{"accessToken": "$MOSYLE_API_key",
	"options": {
		"os": "mac",
		"serial_numbers": "$DeviceSerialNumber",
		"page": "$THEPAGE",
		"specific_columns": "date_last_beat,lostmode_status,last_ip_beat,last_lan_ip,userid"
	}
}
EOF
}
GetCurrentInfo-macos(){
	GetBearerToken
	# content="{\"accessToken\":\"$APIKey\",\"options\":{\"os\":\"mac\",\"serial_numbers\":[\"$DeviceSerialNumber\"],\"specific_columns\":\"date_last_beat,lostmode_status,last_ip_beat,last_lan_ip\"}}"
	# output=$(curl -s -k -X POST -d $content 'https://managerapi.mosyle.com/v2/listdevices') >> $LOG

	#This is a new CURL call with JSON data - JCS 11/8/23
	output=$(curl --location 'https://managerapi.mosyle.com/v2/listdevices' \
		--header 'content-type: application/json' \
		--header "Authorization: Bearer $AuthToken" \
		--data "$(Generate_JSON_MacOSDUMPPostData)") >> $LOG
	
	if echo "$output" | grep "DEVICES_NOTFOUND"; then
		log_line "No updated info available for $DeviceSerialNumber"
		
	else
		if [ "$MB_DEBUG" = "Y" ]; then
			echo "$output" > "/tmp/$DeviceSerialNumber.GetCurrentInfo-macos.txt"
		fi
		
		MicroParse=$(echo "$output"| awk 'BEGIN{FS=",";RS="},{"}{print $0}' | perl -pe 's/.*"date_last_beat":"?(.*?)"?,"lostmode_status":"(.*?)","last_ip_beat":"?(.*?)"?,"last_lan_ip":"?(.*?)",*.*/\1\t\2\t\3\t\4\t\5/')

		LASTCHECKIN=$(echo "$MicroParse" |  cut -f 1 -d$'\t' )
		LOSTMODESTATUS=$(echo "$MicroParse" |  cut -f 2 -d$'\t' )
		LAST_IP_BEAT=$(echo "$MicroParse" |  cut -f 3 -d$'\t' )
		LAST_LAN_IP=$(echo "$MicroParse" |  cut -f 4 -d$'\t' )
		
		if [ "$LASTCHECKIN" = "null" ]; then
			LASTCHECKIN="NO-DATA"
		else
			#Take Epoch time and convert to hours
			LASTCHECKIN=$($PYTHON2USE -c "import datetime; print(datetime.datetime.fromtimestamp(int("$LASTCHECKIN")).strftime('%Y-%m-%d %I:%M:%S %p'))")
		fi
		
		

	fi

}

#This function and the next were added to support Bearer tokens
#in Mosyle.
Generate_JSON_PostData() {
cat <<EOF
	{"accessToken": "$MOSYLE_API_key",
	"email": "$MOSYLE_API_Username",
	"password": "$MOSYLE_API_Password" }
EOF
}

GetBearerToken() {
	#Using JSON Post data from above try to get BearerToken
	GrabToken=$(curl --include --location 'https://managerapi.mosyle.com/v2/login' \
	--header 'Content-Type: application/json' \
	--data "$(Generate_JSON_PostData)" 2>/dev/null)
	
	AuthToken=$(echo "$GrabToken" | grep Authorization | cut -d ' ' -f 3 )

	#Make sure we got data back and if so store it.
	if [ -z "$AuthToken" ]; then
		echo "No token given by Mostle.  FAIL."
		exit 1
	
	else
		echo "Token Given.  Storing.."
		#Strip any Spaces in the Token
		AuthToken="${AuthToken//[[:space:]]/}"
		#Drop the token to file.  Its good for 24hrs
		#so maybe down the road we can reuse it.
		echo "$AuthToken" > /tmp/.MosyleAPI_BearToken
	fi
}



#ColorCodes

#Make sure TERM variable is set.
[[ ${TERM}="" ]] && TPUTTERM='-Txterm-256color' \
                  || TPUTTERM=''

#Define colors
Red=`tput ${TPUTTERM} setaf 1`
Green=`tput ${TPUTTERM} setaf 2`
Yellow=`tput ${TPUTTERM} setaf 3`
Blue=`tput ${TPUTTERM} setaf 4`
Magenta=`tput ${TPUTTERM} setaf 5`
Cyan=`tput ${TPUTTERM} setaf 6`
White=`tput ${TPUTTERM} setaf 7`
Orange=`tput ${TPUTTERM} setaf 202`
reset=`tput ${TPUTTERM} sgr0`
