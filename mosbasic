#!/bin/zsh
#
#MOSBasic 
#
#   __  __  ____   _____ ____            _      
#  |  \/  |/ __ \ / ____|  _ \          (_)     
#  | \  / | |  | | (___ | |_) | __ _ ___ _  ___ 
#  | |\/| | |  | |\___ \|  _ < / _` / __| |/ __|
#  | |  | | |__| |____) | |_) | (_| \__ \ | (__ 
#  |_|  |_|\____/|_____/|____/ \__,_|___/_|\___|
#
#  Easy to use command line tools for interacting with MOSYLE MDM.  In 
#  places I also will interact with IncidentIQ ticket system for data.  
#  I'm going to try to run my inventory check module so anyone could 
#  easily write their own module for the ticket system they use.  Will
#  post a note about that in the wiki later when we get there.
#
# This file is the CLI binder.  Its just to establish our basic command (mosbasic)
# and link up all of its abillities.  Each ability gets a sub file in ./commands

IFS=$'\n'



if [ -h "/usr/local/bin/mosbasic" ]; then
	BAGCLI_WORKDIR=$(readlink /usr/local/bin/mosbasic)
	#Remove our command name from the output above
	BAGCLI_WORKDIR=${BAGCLI_WORKDIR//mosbasic/}
	
	export BAGCLI_WORKDIR
	
else
	#Assume the directory we are in is where our files are.
	export BAGCLI_WORKDIR=$(cd $(dirname $0) && pwd)
fi

echo "WORKING DIR-> $BAGCLI_WORKDIR"


CMDRAN="MOSBASIC"

set -e

#export $(cat "$BAGCLI_WORKDIR/config" | xargs)
source "$BAGCLI_WORKDIR/config"

 #shellcheck source=common
. "$BAGCLI_WORKDIR/common"

echo "Mosyle API Key-> $MOSYLE_API_key"
echo "WORKING DIR-> $BAGCLI_WORKDIR"

cli_help() {
  cli_name="mosbasic"
  cli_graffitti
  echo "

$cli_name
CLI tools for manipulating the Mosyle MDM.

Version: $(cat $BAGCLI_WORKDIR/VERSION)
https://github.com/JCSmillie/MOSBasic
Usage: $cli_name [command]
Commands:
  lostmodeon    Give single asset tag.  Will enable lost mode with default message.
  lostmodeoff   Give single asset tag.  Will disable lost mode.
  annoy         Give single asset tag.  Will play sound.  If device is not in lost mode
                will also enable it. 
  lostmodestatus  Find out current Lost mode status of device.				
  ioswipe		Give single asset tag.  Will Limbo and Wipe that iPad.
  			**NOTE** Wipe will fail if device is not on Wifi.
  ioswipe --scan	Scan multiple devices.  When done hit enter to give a blank.
  			All will be Limbo'd and wiped.  If an individual tag can't be found
			it will be skipped and logged.
  ioswipe --mass <FILE>	Give file with multiple tags.  One per line.  All will 
            be Limbo'd and wiped.  If an individual tag can't be found
		    it will be skipped and logged.  <<PLANNED NOT YET READY>>
  iosdump		Dump info for all iOS devices from Mosyle
  			to local reference files.
  userdump		Dump info for all Users in Mosyle to local
			reference files.
  iosassign	Info will be looked up and then device will be assigned.  <<REQUIRES USERLOOKUP MODULE>>
  iosassign --scan	Scan multiple devices  Tag first then assignment tag.  When done 
  			hit enter to give a blank.  Info will be looked up and then device will
			be assigned.  <<REQUIRES USERLOOKUP MODULE>>
  iosassign --mass	Give file with multiple devices in form of ASSET TAG,USERNAME.  One
  				per line.  All will be assigned properly.  <<PLANNED NOT YET READY>> <<REQUIRES USERLOOKUP MODULE>>
  			
  info <ASSET TAG/USERID/SERIAL>	Look up device assignment data
            by reference point  <ASSET TAG/USERID/SERIAL>		
  *         		Help
"
  exit 1
}

[ ! -f "$BAGCLI_WORKDIR/config" ] \
  && echo "ERROR: No $BAGCLI_WORKDIR/config file not found. " \
  && echo "cp $BAGCLI_WORKDIR/config.template $BAGCLI_WORKDIR/config and adjust." \
  && exit 1

###############################
#   Check Condtions to work   #
###############################
# #See if we know who ran this otherwise note it as Console did it
if [ -z "$RUNNING_USER" ]; then
	RUNNING_USER="<<Console>>"
fi

#export $(cat "$BAGCLI_WORKDIR/config" | xargs)
source "$BAGCLI_WORKDIR/config"

#Make sure our log directory is there
if [ ! -d "$LOCALCONF/MOSBasic" ]; then
	echo "Directory for log files and nat not found.  Creating. $LOCALCONF/MOSBasic"
	mkdir "$LOCALCONF/MOSBasic"
fi

#Check for locally cache'd API key
if [ ! -s "$LOCALCONF/.MosyleAPI" ]; then
	echo "I cant find a local copy of your Mosyle API key.  This can be found in Mosyle"
	echo "Under My School->API Intergration.  Make sure API access is enabled and copy "
	echo "your Access token.  Please provide here:"
	
	read MosyleAPIKeyProvided
	
	if [ -z "$MosyleAPIKeyProvided" ]; then
		echo "No Key Provided.  Epic Fail."
		exit 1
		
	else
		echo "MOSYLE_API_key=\"$MosyleAPIKeyProvided\"" > "$LOCALCONF/.MosyleAPI"
	fi
fi

#Check for outside module support
if [ ! -s "$LOCALCONF/MOSBasic/.modules" ]; then
	echo "Will you be using outside modules to help with lookups of student IDs"
	echo "or other data?  OPTIONS are: iiq, none, or custom  More info can be found"
	echo "in the readme.  DEFAULT is none"
	
	read GotModules
	
	if [ -z "$GotModules" ]; then
		echo "GotModules=none" > "$LOCALCONF/MOSBasic/.modules"
	elif [ "$GotModules" = "iiq" ]; then
		echo "Enabling IncidentIQ support."
		echo "GotModules=iiq" > "$LOCALCONF/MOSBasic/.modules"
				
		if [ ! -s "$LOCALCONF/.incidentIQ" ]; then
			echo "HEADS UP, no local incidentIQ API info is available."
			echo "SEE README FOR MORE INFO."
		else
			source $LOCALCONF/.incidentIQ
			IIQAuth=$(echo "Authorization: Bearer $apitoken")
		fi
		
	elif [ "$GotModules" = "other" ]; then
		echo "This feature is not supported, YET.  Setting to none.."
		echo "GotModules=none" > "$LOCALCONF/MOSBasic/.modules"
	else
		echo "Whatever you typed ($GotModules) I don't know what that is."
		echo "Epic Fail"
		exit 1
	fi
fi	

#First Make sure we have what we need
if [ ! -s "$TEMPOUTPUTFILE_MERGEDIOS" ]; then
	cli_log "$TEMPOUTPUTFILE_MERGEDIOS is missing.  Must grab NOW."
	"$BAGCLI_WORKDIR/commands/mosdatadump-iOS.sh"
fi

if [ ! -s "$TEMPOUTPUTFILE_Users" ]; then
	cli_log "$TEMPOUTPUTFILE_Users is missing.   Must grab NOW."
	"$BAGCLI_WORKDIR/commands/mosdatadump-USERS.sh"
	exit 1
fi




echo "Variable 1-> $1"
echo "Variable 2-> $2"

case "$1" in
  # deploy|d)
  #   "$BAGCLI_WORKDIR/commands/deploy" "$2" | tee -ia "$BAGCLI_WORKDIR/logs/deploy_${2}.log"
  #   ;;
iosdump)
	"$BAGCLI_WORKDIR/commands/mosdatadump-iOS.sh"
	;; 
userdump)
	"$BAGCLI_WORKDIR/commands/mosdatadump-USERS.sh"
	;; 
info)
	"$BAGCLI_WORKDIR/commands/getinfo.sh" "$2"
	;;
ioswipe)
	"$BAGCLI_WORKDIR/commands/iosLimboNWipe.sh" "$2" "$3"
	;;
iosassign)
	"$BAGCLI_WORKDIR/commands/iosAssignDevice.sh" "$2" "$3"
	;;	
lostmodeon)
	"$BAGCLI_WORKDIR/commands/lostmodefun.sh" "--enable" "$2"
	;;	 
lostmodeoff)
	"$BAGCLI_WORKDIR/commands/lostmodefun.sh" "--disable" "$2"
	;;	 
annoy)
	"$BAGCLI_WORKDIR/commands/lostmodefun.sh" "--sound" "$2"
	;;
lostmodestatus)
	"$BAGCLI_WORKDIR/commands/lostmodefun.sh" "--status" "$2"				 		
	;;
  *)
    cli_help
    ;;
esac


