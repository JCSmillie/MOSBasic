#!/bin/zsh
#
#MOSBasic 
#
#   __  __  ____   _____ ____            _      
#  |  \/  |/ __ \ / ____|  _ \          (_)     
#  | \  / | |  | | (___ | |_) | __ _ ___ _  ___ 
#  | |\/| | |  | |\___ \|  _ < / _` / __| |/ __|
#  | |  | | |__| |____) | |_) | (_| \__ \ | (__ 
#  |_|  |_|\____/|_____/|____/ \__,_|___/_|\___|
#
#  Easy to use command line tools for interacting with MOSYLE MDM.  In 
#  places I also will interact with IncidentIQ ticket system for data.  
#  I'm going to try to run my inventory check module so anyone could 
#  easily write their own module for the ticket system they use.  Will
#  post a note about that in the wiki later when we get there.
#
# This file is the CLI binder.  Its just to establish our basic command (mosbasic)
# and link up all of its abillities.  Each ability gets a sub file in ./commands

IFS=$'\n'



if [ -h "/usr/local/bin/mosbasic" ]; then
	BAGCLI_WORKDIR=$(readlink /usr/local/bin/mosbasic)
	#Remove our command name from the output above
	BAGCLI_WORKDIR=${BAGCLI_WORKDIR//mosbasic/}
	
	export BAGCLI_WORKDIR
	
else
	#Assume the directory we are in is where our files are.
	export BAGCLI_WORKDIR=$(cd $(dirname $0) && pwd)
fi

CMDRAN="MOSBASIC"

set -e

#export $(cat "$BAGCLI_WORKDIR/config" | xargs)
source "$BAGCLI_WORKDIR/config"

 #shellcheck source=common
. "$BAGCLI_WORKDIR/common"

# echo "Mosyle API Key-> $MOSYLE_API_key"
# echo "WORKING DIR-> $BAGCLI_WORKDIR"

cli_help() {
  cli_name="mosbasic"
  cli_graffitti
  echo "

$cli_name
CLI tools for manipulating the Mosyle MDM.

Version:${Magenta} $(cat $BAGCLI_WORKDIR/VERSION) ${reset}
${Yellow}https://github.com/JCSmillie/MOSBasic${reset}
Usage: $cli_name [command]
Commands:
  lostmodeon			Give single asset tag.  Will enable lost mode with default message.
  lostmodeoff			Give single asset tag.  Will disable lost mode.
  annoy         		Give single asset tag.  Will play sound.  If device is not in lost mode
 				will also enable it. 
  lostmodestatus  		Find out current Lost mode status of device.	
  whoislost			Gives list of all devices currently in lost mode and waitng to be in
  			  	in lost mode.  Output is color coded and when ran ALL ENABLED DEVICES
				are sent the command to play sound.	
  ioswipe			Give single asset tag.  Will Limbo and Wipe that iPad.
  				**NOTE** Wipe will fail if device is not on Wifi.
  ioswipe --scan		Scan multiple devices.  When done hit enter to give a blank.
  				All will be Limbo'd and wiped.  If an individual tag can't be found
				it will be skipped and logged.
  ioswipe --mass <FILE>		Give file with multiple tags.  One per line.  All will 
            			be Limbo'd and wiped.  If an individual tag can't be found
		    		it will be skipped and logged.  <<PLANNED NOT YET READY>>
  iosdump			Dump info for all iOS devices from Mosyle to local reference files.
  macdump			Dump info for all MacOS devices from Mosyle to local reference files.				
  userdump			Dump info for all Users in Mosyle to local reference files.
  iosassign			Info will be looked up and then device will be assigned.  <<REQUIRES USERLOOKUP MODULE>>
  iosassign --scan		Scan multiple devices  Tag first then assignment tag.  When done 
  				hit enter to give a blank.  Info will be looked up and then device will
				be assigned.  <<REQUIRES USERLOOKUP MODULE>>
  iosassign --mass		Give file with multiple devices in form of ASSET TAG,USERNAME.  One
  				per line.  All will be assigned properly.  <<PLANNED NOT YET READY>> <<REQUIRES USERLOOKUP MODULE>>
  			
  info <ASSET TAG/USERID/SERIAL>	Look up device assignment data by reference point  <ASSET TAG/USERID/SERIAL>		
  listgroups --mac		Display list of all current Mac Device Groups in Mosyle
  listgroups --ios		Display list of all current iOS Device Groups in Mosyle
  
  serialcheck /path/to/textfileofserials.txt </output/place.csv>
  				This command takes a text file (one serial per line) and outputs
				what serials also appear in Mosyle from that file.  This is helpful
				for end of year operations where you want to release a ton of Macs 
				or iPads.  Send the output to Mosyle support to have those all removed.
				Output file is optional.
"
  exit 1
}

[ ! -f "$BAGCLI_WORKDIR/config" ] \
  && echo "ERROR: No $BAGCLI_WORKDIR/config file not found. " \
  && echo "sudo $BAGCLI_WORKDIR/RUNME1st_CONFIGSCRIPT.sh to setup." \
  && exit 1

###############################
#   Check Condtions to work   #
###############################
# #See if we know who ran this otherwise note it as Console did it
if [ -z "$RUNNING_USER" ]; then
	RUNNING_USER="<<Console>>"
fi

#export $(cat "$BAGCLI_WORKDIR/config" | xargs)
source "$BAGCLI_WORKDIR/config"

#Make sure our log directory is there
if [ ! -d "$LOCALCONF/MOSBasic" ]; then
	echo "Directory for log files and nat not found.  Creating. $LOCALCONF/MOSBasic"
	mkdir "$LOCALCONF/MOSBasic"
fi

#Check for locally cache'd API key
if [ ! -s "$LOCALCONF/.MosyleAPI" ]; then
	echo "I cant find a local copy of your Mosyle API key.  This can be found in Mosyle"
	echo "Under My School->API Intergration.  Make sure API access is enabled and copy "
	echo "your Access token.  Please provide here:"
	
	read MosyleAPIKeyProvided
	
	if [ -z "$MosyleAPIKeyProvided" ]; then
		echo "No Key Provided.  Epic Fail."
		exit 1
		
	else
		echo "MOSYLE_API_key=\"$MosyleAPIKeyProvided\"" > "$LOCALCONF/.MosyleAPI"
	fi
fi

#Check for outside module support
if [ ! -s "$LOCALCONF/MOSBasic/.modules" ]; then
	sudo "Modules doesn't seem to be setup."
	echo "sudo $BAGCLI_WORKDIR/RUNME1st_CONFIGSCRIPT.sh to setup."
	echo "SEE README FOR MORE INFO."
	exit 1
fi

#Sanity check what is listed in the Modules support
#bracket.
source 	"$LOCALCONF"/MOSBasic/.modules
if [ "$GotModules" = "iiq" ]; then
	if [ ! -s "$LOCALCONF/.incidentIQ" ]; then
		echo "HEADS UP, no local incidentIQ API info is available."
		echo "SEE README FOR MORE INFO."
	else
		source $LOCALCONF/.incidentIQ
		IIQAuth=$(echo "Authorization: Bearer $apitoken")
	fi
	
elif [ "$GotModules" = "other" ]; then
	echo "This feature is not supported, YET.  Setting to none.."
else
	echo "Whatever you have in "$LOCALCONF"/MOSBasic/.modules ($GotModules) I don't know what that is."
	echo "Epic Fail"
	exit 1
fi


##Check for Python
if [ ! -x "$PYTHON2USE" ]; then
	echo "Could not find an executable for python3.  Please check $BAGCLI_WORKDIR/config"
	exit 1
fi

#######################################
# Do we have cache'd data about iPads
#######################################
#First Make sure we have what we need
if [ ! -s "$TEMPOUTPUTFILE_MERGEDIOS" ]; then
	cli_log "$TEMPOUTPUTFILE_MERGEDIOS is missing.  Must grab NOW."
	GETIOSDATA="YES"
	#"$BAGCLI_WORKDIR/commands/mosdatadump-iOS.sh"
	
#Is the command we are about to run one that is going to pull its own data?
elif [ "$1" = "whoislost" ] || [ "$1" = "lostmodeon" ] || [ "$1" = "lostmodeoff" ] || [ "$1" = "lostmodestatus" ] || [ "$1" = "annoy" ]; then
	cli_log "Skipping Local Data check because $1 pulls its own data..."

#If our data is older than 24hr then update it.
elif [ `find "$TEMPOUTPUTFILE_MERGEDIOS" -mmin +1440 | egrep '.*'` ]; then
	cli_log "$TEMPOUTPUTFILE_MERGEDIOS is older than a day.  Updating."
	#"$BAGCLI_WORKDIR/commands/mosdatadump-iOS.sh"
	GETIOSDATA="YES"

else
	GETIOSDATA="NO"
fi

#######################################
# Do we have cache'd data about Users
#######################################
if [ ! -s "$TEMPOUTPUTFILE_Users" ]; then
	cli_log "$TEMPOUTPUTFILE_Users is missing.   Must grab NOW."
	GETUSERDATA="YES"
	#"$BAGCLI_WORKDIR/commands/mosdatadump-USERS.sh"
	
#Is the command we are about to run one that is going to pull its own data?
elif [ "$1" = "whoislost" ] || [ "$1" = "lostmodeon" ] || [ "$1" = "lostmodeoff" ] || [ "$1" = "lostmodestatus" ] || [ "$1" = "annoy" ]; then
	cli_log "Skipping Local Data check because $1 pulls its own data..."
		
#If our data is older than 24hr then update it.
elif [ `find "$TEMPOUTPUTFILE_Users" -mmin +1440 | egrep '.*'` ]; then
	cli_log "$TEMPOUTPUTFILE_Users is older than a day.  Updating."
	#"$BAGCLI_WORKDIR/commands/mosdatadump-USERS.sh"
	GETUSERDATA="YES"

else
	GETUSERDATA="NO"
fi

if [ "$GETUSERDATA" = "YES" ] && [ "$GETUSERDATA" = "YES" ]; then
	cli_log "Doing iosdump and userdump in parallel."
	"$BAGCLI_WORKDIR/commands/mosdatadump-iOS.sh" &
	P1=$!
	"$BAGCLI_WORKDIR/commands/mosdatadump-USERS.sh" &
	P2=$!
	wait $P1 $P2

elif  [ "$GETUSERDATA" = "YES" ]; then
	cli_log "Doing User dump only."
	"$BAGCLI_WORKDIR/commands/mosdatadump-USERS.sh"

elif [ "$GETIOSDATA" = "YES" ]; then
		cli_log "Doing iOS dump only."
	"$BAGCLI_WORKDIR/commands/mosdatadump-iOS.sh"
fi




# echo "Variable 1-> $1"
# echo "Variable 2-> $2"

case "$1" in
macdump)
	"$BAGCLI_WORKDIR/commands/mosdatadump-Mac.sh"
	;; 
iosdump)
	"$BAGCLI_WORKDIR/commands/mosdatadump-iOS.sh"
	;; 
userdump)
	"$BAGCLI_WORKDIR/commands/mosdatadump-USERS.sh"
	;; 
info)
	"$BAGCLI_WORKDIR/commands/getinfo.sh" "$2"
	;;
ioswipe)
	"$BAGCLI_WORKDIR/commands/iosLimboNWipe.sh" "$2" "$3"
	;;
iosassign)
	"$BAGCLI_WORKDIR/commands/iosAssignDevice.sh" "$2" "$3"
	;;	
lostmodeon)
	"$BAGCLI_WORKDIR/commands/lostmodefun.sh" "--enable" "$2"
	;;	 
lostmodeoff)
	"$BAGCLI_WORKDIR/commands/lostmodefun.sh" "--disable" "$2"
	;;	 
annoy)
	"$BAGCLI_WORKDIR/commands/lostmodefun.sh" "--sound" "$2"
	;;
lostmodestatus)
	"$BAGCLI_WORKDIR/commands/lostmodefun.sh" "--status" "$2"				 		
	;;
whoislost)
	"$BAGCLI_WORKDIR/commands/lostmodefun.sh" "--whoislost"
	;;
listgroups)
	"$BAGCLI_WORKDIR/commands/groupsquery.sh" "$2"
	;;
whoislost)
	"$BAGCLI_WORKDIR/commands/lostmodefun.sh" "--whoislost"
	;;
serialcheck)
	"$BAGCLI_WORKDIR/commands/SerialinMosyle.sh" "$2" "$3"
	;;			
  *)
    cli_help
    ;;
esac




